// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wasm/wasm_input.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WasmValue defines a universal input value that supports all input types
// for wasmedge-bindgen.
// This message is designed to be fully compatible with the wasmedge-bindgen
// library, accommodating all parameter types accepted by its Execute() method.
// The use of `oneof` ensures that each WasmValue can only be of one specific
// type, providing type safety.
//
// Supported types include:
// - All basic numeric types (bool, int8-int64, uint8-uint64, float32/64)
// - Strings and byte arrays
// - Various array types
//
// Example usage:
//
//	// String input
//	input1 := &WasmValue{Value: &WasmValue_StringValue{StringValue: "hello"}}
//
//	// Integer array input
//	input2 := &WasmValue{Value: &WasmValue_Int32Array{
//	  Int32Array: &Int32Array{Values: []int32{1, 2, 3}}
//	}}
type WasmValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*WasmValue_BoolValue
	//	*WasmValue_Int8Value
	//	*WasmValue_Uint8Value
	//	*WasmValue_Int16Value
	//	*WasmValue_Uint16Value
	//	*WasmValue_Int32Value
	//	*WasmValue_Uint32Value
	//	*WasmValue_Int64Value
	//	*WasmValue_Uint64Value
	//	*WasmValue_Float32Value
	//	*WasmValue_Float64Value
	//	*WasmValue_StringValue
	//	*WasmValue_BytesValue
	//	*WasmValue_Int8Array
	//	*WasmValue_Uint16Array
	//	*WasmValue_Int16Array
	//	*WasmValue_Uint32Array
	//	*WasmValue_Int32Array
	//	*WasmValue_Uint64Array
	//	*WasmValue_Int64Array
	Value         isWasmValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WasmValue) Reset() {
	*x = WasmValue{}
	mi := &file_wasm_wasm_input_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WasmValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmValue) ProtoMessage() {}

func (x *WasmValue) ProtoReflect() protoreflect.Message {
	mi := &file_wasm_wasm_input_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmValue.ProtoReflect.Descriptor instead.
func (*WasmValue) Descriptor() ([]byte, []int) {
	return file_wasm_wasm_input_proto_rawDescGZIP(), []int{0}
}

func (x *WasmValue) GetValue() isWasmValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *WasmValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *WasmValue) GetInt8Value() int32 {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Int8Value); ok {
			return x.Int8Value
		}
	}
	return 0
}

func (x *WasmValue) GetUint8Value() uint32 {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Uint8Value); ok {
			return x.Uint8Value
		}
	}
	return 0
}

func (x *WasmValue) GetInt16Value() int32 {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Int16Value); ok {
			return x.Int16Value
		}
	}
	return 0
}

func (x *WasmValue) GetUint16Value() uint32 {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Uint16Value); ok {
			return x.Uint16Value
		}
	}
	return 0
}

func (x *WasmValue) GetInt32Value() int32 {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Int32Value); ok {
			return x.Int32Value
		}
	}
	return 0
}

func (x *WasmValue) GetUint32Value() uint32 {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Uint32Value); ok {
			return x.Uint32Value
		}
	}
	return 0
}

func (x *WasmValue) GetInt64Value() int64 {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Int64Value); ok {
			return x.Int64Value
		}
	}
	return 0
}

func (x *WasmValue) GetUint64Value() uint64 {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Uint64Value); ok {
			return x.Uint64Value
		}
	}
	return 0
}

func (x *WasmValue) GetFloat32Value() float32 {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Float32Value); ok {
			return x.Float32Value
		}
	}
	return 0
}

func (x *WasmValue) GetFloat64Value() float64 {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Float64Value); ok {
			return x.Float64Value
		}
	}
	return 0
}

func (x *WasmValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *WasmValue) GetBytesValue() []byte {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_BytesValue); ok {
			return x.BytesValue
		}
	}
	return nil
}

func (x *WasmValue) GetInt8Array() *Int8Array {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Int8Array); ok {
			return x.Int8Array
		}
	}
	return nil
}

func (x *WasmValue) GetUint16Array() *Uint16Array {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Uint16Array); ok {
			return x.Uint16Array
		}
	}
	return nil
}

func (x *WasmValue) GetInt16Array() *Int16Array {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Int16Array); ok {
			return x.Int16Array
		}
	}
	return nil
}

func (x *WasmValue) GetUint32Array() *Uint32Array {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Uint32Array); ok {
			return x.Uint32Array
		}
	}
	return nil
}

func (x *WasmValue) GetInt32Array() *Int32Array {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Int32Array); ok {
			return x.Int32Array
		}
	}
	return nil
}

func (x *WasmValue) GetUint64Array() *Uint64Array {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Uint64Array); ok {
			return x.Uint64Array
		}
	}
	return nil
}

func (x *WasmValue) GetInt64Array() *Int64Array {
	if x != nil {
		if x, ok := x.Value.(*WasmValue_Int64Array); ok {
			return x.Int64Array
		}
	}
	return nil
}

type isWasmValue_Value interface {
	isWasmValue_Value()
}

type WasmValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,1,opt,name=bool_value,json=boolValue,proto3,oneof"` // Boolean value, corresponds to Go's `bool`.
}

type WasmValue_Int8Value struct {
	Int8Value int32 `protobuf:"varint,2,opt,name=int8_value,json=int8Value,proto3,oneof"` // 8-bit signed integer, corresponds to Go's `int8`. Stored as int32
}

type WasmValue_Uint8Value struct {
	// to align with protobuf specifications.
	Uint8Value uint32 `protobuf:"varint,3,opt,name=uint8_value,json=uint8Value,proto3,oneof"` // 8-bit unsigned integer, corresponds to Go's
}

type WasmValue_Int16Value struct {
	// `uint8`. Stored as uint32.
	Int16Value int32 `protobuf:"varint,4,opt,name=int16_value,json=int16Value,proto3,oneof"` // 16-bit signed integer, corresponds to Go's
}

type WasmValue_Uint16Value struct {
	// `int16`. Stored as int32.
	Uint16Value uint32 `protobuf:"varint,5,opt,name=uint16_value,json=uint16Value,proto3,oneof"` // 16-bit unsigned integer, corresponds to Go's
}

type WasmValue_Int32Value struct {
	// `uint16`. Stored as uint32.
	Int32Value int32 `protobuf:"varint,6,opt,name=int32_value,json=int32Value,proto3,oneof"` // 32-bit signed integer, corresponds to Go's `int32`.
}

type WasmValue_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,7,opt,name=uint32_value,json=uint32Value,proto3,oneof"` // 32-bit unsigned integer, corresponds to Go's `uint32`.
}

type WasmValue_Int64Value struct {
	Int64Value int64 `protobuf:"varint,8,opt,name=int64_value,json=int64Value,proto3,oneof"` // 64-bit signed integer, corresponds to Go's `int64`.
}

type WasmValue_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,9,opt,name=uint64_value,json=uint64Value,proto3,oneof"` // 64-bit unsigned integer, corresponds to Go's `uint64`.
}

type WasmValue_Float32Value struct {
	Float32Value float32 `protobuf:"fixed32,10,opt,name=float32_value,json=float32Value,proto3,oneof"` // 32-bit floating-point number, corresponds to Go's `float32`.
}

type WasmValue_Float64Value struct {
	Float64Value float64 `protobuf:"fixed64,11,opt,name=float64_value,json=float64Value,proto3,oneof"` // 64-bit floating-point number, corresponds to Go's `float64`.
}

type WasmValue_StringValue struct {
	StringValue string `protobuf:"bytes,12,opt,name=string_value,json=stringValue,proto3,oneof"` // UTF-8 string, corresponds to Go's `string`.
}

type WasmValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,13,opt,name=bytes_value,json=bytesValue,proto3,oneof"` // Byte array, corresponds to Go's `[]byte`. Often
}

type WasmValue_Int8Array struct {
	Int8Array *Int8Array `protobuf:"bytes,20,opt,name=int8_array,json=int8Array,proto3,oneof"` // Array of int8, corresponds to Go's `[]int8`.
}

type WasmValue_Uint16Array struct {
	Uint16Array *Uint16Array `protobuf:"bytes,21,opt,name=uint16_array,json=uint16Array,proto3,oneof"` // Array of uint16, corresponds to Go's `[]uint16`.
}

type WasmValue_Int16Array struct {
	Int16Array *Int16Array `protobuf:"bytes,22,opt,name=int16_array,json=int16Array,proto3,oneof"` // Array of int16, corresponds to Go's `[]int16`.
}

type WasmValue_Uint32Array struct {
	Uint32Array *Uint32Array `protobuf:"bytes,23,opt,name=uint32_array,json=uint32Array,proto3,oneof"` // Array of uint32, corresponds to Go's `[]uint32`.
}

type WasmValue_Int32Array struct {
	Int32Array *Int32Array `protobuf:"bytes,24,opt,name=int32_array,json=int32Array,proto3,oneof"` // Array of int32, corresponds to Go's `[]int32`.
}

type WasmValue_Uint64Array struct {
	Uint64Array *Uint64Array `protobuf:"bytes,25,opt,name=uint64_array,json=uint64Array,proto3,oneof"` // Array of uint64, corresponds to Go's `[]uint64`.
}

type WasmValue_Int64Array struct {
	Int64Array *Int64Array `protobuf:"bytes,26,opt,name=int64_array,json=int64Array,proto3,oneof"` // Array of int64, corresponds to Go's `[]int64`.
}

func (*WasmValue_BoolValue) isWasmValue_Value() {}

func (*WasmValue_Int8Value) isWasmValue_Value() {}

func (*WasmValue_Uint8Value) isWasmValue_Value() {}

func (*WasmValue_Int16Value) isWasmValue_Value() {}

func (*WasmValue_Uint16Value) isWasmValue_Value() {}

func (*WasmValue_Int32Value) isWasmValue_Value() {}

func (*WasmValue_Uint32Value) isWasmValue_Value() {}

func (*WasmValue_Int64Value) isWasmValue_Value() {}

func (*WasmValue_Uint64Value) isWasmValue_Value() {}

func (*WasmValue_Float32Value) isWasmValue_Value() {}

func (*WasmValue_Float64Value) isWasmValue_Value() {}

func (*WasmValue_StringValue) isWasmValue_Value() {}

func (*WasmValue_BytesValue) isWasmValue_Value() {}

func (*WasmValue_Int8Array) isWasmValue_Value() {}

func (*WasmValue_Uint16Array) isWasmValue_Value() {}

func (*WasmValue_Int16Array) isWasmValue_Value() {}

func (*WasmValue_Uint32Array) isWasmValue_Value() {}

func (*WasmValue_Int32Array) isWasmValue_Value() {}

func (*WasmValue_Uint64Array) isWasmValue_Value() {}

func (*WasmValue_Int64Array) isWasmValue_Value() {}

// Int8Array defines an array of 8-bit signed integers.
// Note: Protobuf does not have a native `int8` type, so `int32` is used for
// storage. When converting to Go types, ensure values are within the range
// [-128, 127].
type Int8Array struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int32                `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"` // Values should range from -128 to 127.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int8Array) Reset() {
	*x = Int8Array{}
	mi := &file_wasm_wasm_input_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int8Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int8Array) ProtoMessage() {}

func (x *Int8Array) ProtoReflect() protoreflect.Message {
	mi := &file_wasm_wasm_input_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int8Array.ProtoReflect.Descriptor instead.
func (*Int8Array) Descriptor() ([]byte, []int) {
	return file_wasm_wasm_input_proto_rawDescGZIP(), []int{1}
}

func (x *Int8Array) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Uint16Array defines an array of 16-bit unsigned integers.
// Values range from 0 to 65535.
type Uint16Array struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []uint32               `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"` // Stored as uint32 due to Protobuf limitations.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Uint16Array) Reset() {
	*x = Uint16Array{}
	mi := &file_wasm_wasm_input_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint16Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint16Array) ProtoMessage() {}

func (x *Uint16Array) ProtoReflect() protoreflect.Message {
	mi := &file_wasm_wasm_input_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint16Array.ProtoReflect.Descriptor instead.
func (*Uint16Array) Descriptor() ([]byte, []int) {
	return file_wasm_wasm_input_proto_rawDescGZIP(), []int{2}
}

func (x *Uint16Array) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Int16Array defines an array of 16-bit signed integers.
// Values range from -32768 to 32767.
type Int16Array struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int32                `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"` // Stored as int32 due to Protobuf limitations.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int16Array) Reset() {
	*x = Int16Array{}
	mi := &file_wasm_wasm_input_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int16Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int16Array) ProtoMessage() {}

func (x *Int16Array) ProtoReflect() protoreflect.Message {
	mi := &file_wasm_wasm_input_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int16Array.ProtoReflect.Descriptor instead.
func (*Int16Array) Descriptor() ([]byte, []int) {
	return file_wasm_wasm_input_proto_rawDescGZIP(), []int{3}
}

func (x *Int16Array) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Uint32Array defines an array of 32-bit unsigned integers.
// Values range from 0 to 4,294,967,295.
type Uint32Array struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []uint32               `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Uint32Array) Reset() {
	*x = Uint32Array{}
	mi := &file_wasm_wasm_input_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint32Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32Array) ProtoMessage() {}

func (x *Uint32Array) ProtoReflect() protoreflect.Message {
	mi := &file_wasm_wasm_input_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32Array.ProtoReflect.Descriptor instead.
func (*Uint32Array) Descriptor() ([]byte, []int) {
	return file_wasm_wasm_input_proto_rawDescGZIP(), []int{4}
}

func (x *Uint32Array) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Int32Array defines an array of 32-bit signed integers.
// Values range from -2,147,483,648 to 2,147,483,647.
type Int32Array struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int32                `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int32Array) Reset() {
	*x = Int32Array{}
	mi := &file_wasm_wasm_input_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int32Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Array) ProtoMessage() {}

func (x *Int32Array) ProtoReflect() protoreflect.Message {
	mi := &file_wasm_wasm_input_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Array.ProtoReflect.Descriptor instead.
func (*Int32Array) Descriptor() ([]byte, []int) {
	return file_wasm_wasm_input_proto_rawDescGZIP(), []int{5}
}

func (x *Int32Array) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Uint64Array defines an array of 64-bit unsigned integers.
// Values range from 0 to 18,446,744,073,709,551,615.
type Uint64Array struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []uint64               `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Uint64Array) Reset() {
	*x = Uint64Array{}
	mi := &file_wasm_wasm_input_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint64Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint64Array) ProtoMessage() {}

func (x *Uint64Array) ProtoReflect() protoreflect.Message {
	mi := &file_wasm_wasm_input_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint64Array.ProtoReflect.Descriptor instead.
func (*Uint64Array) Descriptor() ([]byte, []int) {
	return file_wasm_wasm_input_proto_rawDescGZIP(), []int{6}
}

func (x *Uint64Array) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Int64Array defines an array of 64-bit signed integers.
// Values range from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.
type Int64Array struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int64                `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int64Array) Reset() {
	*x = Int64Array{}
	mi := &file_wasm_wasm_input_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int64Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Array) ProtoMessage() {}

func (x *Int64Array) ProtoReflect() protoreflect.Message {
	mi := &file_wasm_wasm_input_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64Array.ProtoReflect.Descriptor instead.
func (*Int64Array) Descriptor() ([]byte, []int) {
	return file_wasm_wasm_input_proto_rawDescGZIP(), []int{7}
}

func (x *Int64Array) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_wasm_wasm_input_proto protoreflect.FileDescriptor

const file_wasm_wasm_input_proto_rawDesc = "" +
	"\n" +
	"\x15wasm/wasm_input.proto\x12\x04wasm\"\xe0\x06\n" +
	"\tWasmValue\x12\x1f\n" +
	"\n" +
	"bool_value\x18\x01 \x01(\bH\x00R\tboolValue\x12\x1f\n" +
	"\n" +
	"int8_value\x18\x02 \x01(\x05H\x00R\tint8Value\x12!\n" +
	"\vuint8_value\x18\x03 \x01(\rH\x00R\n" +
	"uint8Value\x12!\n" +
	"\vint16_value\x18\x04 \x01(\x05H\x00R\n" +
	"int16Value\x12#\n" +
	"\fuint16_value\x18\x05 \x01(\rH\x00R\vuint16Value\x12!\n" +
	"\vint32_value\x18\x06 \x01(\x05H\x00R\n" +
	"int32Value\x12#\n" +
	"\fuint32_value\x18\a \x01(\rH\x00R\vuint32Value\x12!\n" +
	"\vint64_value\x18\b \x01(\x03H\x00R\n" +
	"int64Value\x12#\n" +
	"\fuint64_value\x18\t \x01(\x04H\x00R\vuint64Value\x12%\n" +
	"\rfloat32_value\x18\n" +
	" \x01(\x02H\x00R\ffloat32Value\x12%\n" +
	"\rfloat64_value\x18\v \x01(\x01H\x00R\ffloat64Value\x12#\n" +
	"\fstring_value\x18\f \x01(\tH\x00R\vstringValue\x12!\n" +
	"\vbytes_value\x18\r \x01(\fH\x00R\n" +
	"bytesValue\x120\n" +
	"\n" +
	"int8_array\x18\x14 \x01(\v2\x0f.wasm.Int8ArrayH\x00R\tint8Array\x126\n" +
	"\fuint16_array\x18\x15 \x01(\v2\x11.wasm.Uint16ArrayH\x00R\vuint16Array\x123\n" +
	"\vint16_array\x18\x16 \x01(\v2\x10.wasm.Int16ArrayH\x00R\n" +
	"int16Array\x126\n" +
	"\fuint32_array\x18\x17 \x01(\v2\x11.wasm.Uint32ArrayH\x00R\vuint32Array\x123\n" +
	"\vint32_array\x18\x18 \x01(\v2\x10.wasm.Int32ArrayH\x00R\n" +
	"int32Array\x126\n" +
	"\fuint64_array\x18\x19 \x01(\v2\x11.wasm.Uint64ArrayH\x00R\vuint64Array\x123\n" +
	"\vint64_array\x18\x1a \x01(\v2\x10.wasm.Int64ArrayH\x00R\n" +
	"int64ArrayB\a\n" +
	"\x05value\"#\n" +
	"\tInt8Array\x12\x16\n" +
	"\x06values\x18\x01 \x03(\x05R\x06values\"%\n" +
	"\vUint16Array\x12\x16\n" +
	"\x06values\x18\x01 \x03(\rR\x06values\"$\n" +
	"\n" +
	"Int16Array\x12\x16\n" +
	"\x06values\x18\x01 \x03(\x05R\x06values\"%\n" +
	"\vUint32Array\x12\x16\n" +
	"\x06values\x18\x01 \x03(\rR\x06values\"$\n" +
	"\n" +
	"Int32Array\x12\x16\n" +
	"\x06values\x18\x01 \x03(\x05R\x06values\"%\n" +
	"\vUint64Array\x12\x16\n" +
	"\x06values\x18\x01 \x03(\x04R\x06values\"$\n" +
	"\n" +
	"Int64Array\x12\x16\n" +
	"\x06values\x18\x01 \x03(\x03R\x06valuesB/Z-github.com/IntelliXLabs/wasmvm-tee/wasm/typesb\x06proto3"

var (
	file_wasm_wasm_input_proto_rawDescOnce sync.Once
	file_wasm_wasm_input_proto_rawDescData []byte
)

func file_wasm_wasm_input_proto_rawDescGZIP() []byte {
	file_wasm_wasm_input_proto_rawDescOnce.Do(func() {
		file_wasm_wasm_input_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wasm_wasm_input_proto_rawDesc), len(file_wasm_wasm_input_proto_rawDesc)))
	})
	return file_wasm_wasm_input_proto_rawDescData
}

var file_wasm_wasm_input_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_wasm_wasm_input_proto_goTypes = []any{
	(*WasmValue)(nil),   // 0: wasm.WasmValue
	(*Int8Array)(nil),   // 1: wasm.Int8Array
	(*Uint16Array)(nil), // 2: wasm.Uint16Array
	(*Int16Array)(nil),  // 3: wasm.Int16Array
	(*Uint32Array)(nil), // 4: wasm.Uint32Array
	(*Int32Array)(nil),  // 5: wasm.Int32Array
	(*Uint64Array)(nil), // 6: wasm.Uint64Array
	(*Int64Array)(nil),  // 7: wasm.Int64Array
}
var file_wasm_wasm_input_proto_depIdxs = []int32{
	1, // 0: wasm.WasmValue.int8_array:type_name -> wasm.Int8Array
	2, // 1: wasm.WasmValue.uint16_array:type_name -> wasm.Uint16Array
	3, // 2: wasm.WasmValue.int16_array:type_name -> wasm.Int16Array
	4, // 3: wasm.WasmValue.uint32_array:type_name -> wasm.Uint32Array
	5, // 4: wasm.WasmValue.int32_array:type_name -> wasm.Int32Array
	6, // 5: wasm.WasmValue.uint64_array:type_name -> wasm.Uint64Array
	7, // 6: wasm.WasmValue.int64_array:type_name -> wasm.Int64Array
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_wasm_wasm_input_proto_init() }
func file_wasm_wasm_input_proto_init() {
	if File_wasm_wasm_input_proto != nil {
		return
	}
	file_wasm_wasm_input_proto_msgTypes[0].OneofWrappers = []any{
		(*WasmValue_BoolValue)(nil),
		(*WasmValue_Int8Value)(nil),
		(*WasmValue_Uint8Value)(nil),
		(*WasmValue_Int16Value)(nil),
		(*WasmValue_Uint16Value)(nil),
		(*WasmValue_Int32Value)(nil),
		(*WasmValue_Uint32Value)(nil),
		(*WasmValue_Int64Value)(nil),
		(*WasmValue_Uint64Value)(nil),
		(*WasmValue_Float32Value)(nil),
		(*WasmValue_Float64Value)(nil),
		(*WasmValue_StringValue)(nil),
		(*WasmValue_BytesValue)(nil),
		(*WasmValue_Int8Array)(nil),
		(*WasmValue_Uint16Array)(nil),
		(*WasmValue_Int16Array)(nil),
		(*WasmValue_Uint32Array)(nil),
		(*WasmValue_Int32Array)(nil),
		(*WasmValue_Uint64Array)(nil),
		(*WasmValue_Int64Array)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wasm_wasm_input_proto_rawDesc), len(file_wasm_wasm_input_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wasm_wasm_input_proto_goTypes,
		DependencyIndexes: file_wasm_wasm_input_proto_depIdxs,
		MessageInfos:      file_wasm_wasm_input_proto_msgTypes,
	}.Build()
	File_wasm_wasm_input_proto = out.File
	file_wasm_wasm_input_proto_goTypes = nil
	file_wasm_wasm_input_proto_depIdxs = nil
}
