// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: dtvm/dtvm.proto

package dtvm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DTVMMode defines the execution mode for DTVM
// Corresponds to int32_t _mode: 0: interp, 1: singlepass, 2: multipass
type DTVMMode int32

const (
	DTVMMode_DTVM_MODE_INTERP_UNSPECIFIED DTVMMode = 0 // Unspecified/Default interpreter mode
	DTVMMode_DTVM_MODE_SINGLEPASS         DTVMMode = 1 // Single-pass compilation mode
	DTVMMode_DTVM_MODE_MULTIPASS          DTVMMode = 2 // Multi-pass compilation mode
)

// Enum value maps for DTVMMode.
var (
	DTVMMode_name = map[int32]string{
		0: "DTVM_MODE_INTERP_UNSPECIFIED",
		1: "DTVM_MODE_SINGLEPASS",
		2: "DTVM_MODE_MULTIPASS",
	}
	DTVMMode_value = map[string]int32{
		"DTVM_MODE_INTERP_UNSPECIFIED": 0,
		"DTVM_MODE_SINGLEPASS":         1,
		"DTVM_MODE_MULTIPASS":          2,
	}
)

func (x DTVMMode) Enum() *DTVMMode {
	p := new(DTVMMode)
	*p = x
	return p
}

func (x DTVMMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DTVMMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dtvm_dtvm_proto_enumTypes[0].Descriptor()
}

func (DTVMMode) Type() protoreflect.EnumType {
	return &file_dtvm_dtvm_proto_enumTypes[0]
}

func (x DTVMMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DTVMMode.Descriptor instead.
func (DTVMMode) EnumDescriptor() ([]byte, []int) {
	return file_dtvm_dtvm_proto_rawDescGZIP(), []int{0}
}

// ValueType enumerates the supported value types in DTVM
type ValueType int32

const (
	ValueType_VALUE_TYPE_UNSPECIFIED ValueType = 0 // Unspecified type
	ValueType_VALUE_TYPE_INT32       ValueType = 1 // 32-bit signed integer
	ValueType_VALUE_TYPE_INT64       ValueType = 2 // 64-bit signed integer
	ValueType_VALUE_TYPE_FLOAT32     ValueType = 3 // 32-bit floating point
	ValueType_VALUE_TYPE_FLOAT64     ValueType = 4 // 64-bit floating point
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "VALUE_TYPE_UNSPECIFIED",
		1: "VALUE_TYPE_INT32",
		2: "VALUE_TYPE_INT64",
		3: "VALUE_TYPE_FLOAT32",
		4: "VALUE_TYPE_FLOAT64",
	}
	ValueType_value = map[string]int32{
		"VALUE_TYPE_UNSPECIFIED": 0,
		"VALUE_TYPE_INT32":       1,
		"VALUE_TYPE_INT64":       2,
		"VALUE_TYPE_FLOAT32":     3,
		"VALUE_TYPE_FLOAT64":     4,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_dtvm_dtvm_proto_enumTypes[1].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_dtvm_dtvm_proto_enumTypes[1]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_dtvm_dtvm_proto_rawDescGZIP(), []int{1}
}

// DTVMExecution represents a DTVM execution request containing
// the bytecode and input parameters to be executed in TEE environment
type DTVMExecution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`                      // Protocol version
	RequestId     string                 `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // Unique request identifier
	Bytecode      string                 `protobuf:"bytes,3,opt,name=bytecode,proto3" json:"bytecode,omitempty"`                    // DTVM bytecode (base64 encoded)
	FnName        string                 `protobuf:"bytes,4,opt,name=fn_name,json=fnName,proto3" json:"fn_name,omitempty"`          // Function name to execute
	Inputs        []string               `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`                        // Input parameters (base64 encoded)
	Timestamp     int64                  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                 // Timestamp of the execution request
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DTVMExecution) Reset() {
	*x = DTVMExecution{}
	mi := &file_dtvm_dtvm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DTVMExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTVMExecution) ProtoMessage() {}

func (x *DTVMExecution) ProtoReflect() protoreflect.Message {
	mi := &file_dtvm_dtvm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTVMExecution.ProtoReflect.Descriptor instead.
func (*DTVMExecution) Descriptor() ([]byte, []int) {
	return file_dtvm_dtvm_proto_rawDescGZIP(), []int{0}
}

func (x *DTVMExecution) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DTVMExecution) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DTVMExecution) GetBytecode() string {
	if x != nil {
		return x.Bytecode
	}
	return ""
}

func (x *DTVMExecution) GetFnName() string {
	if x != nil {
		return x.FnName
	}
	return ""
}

func (x *DTVMExecution) GetInputs() []string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *DTVMExecution) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// DTVMRuntimeConfig defines the runtime configuration for DTVM execution
type DTVMRuntimeConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mode          DTVMMode               `protobuf:"varint,1,opt,name=mode,proto3,enum=dtvm.DTVMMode" json:"mode,omitempty"`     // Execution mode (interpreter/compiler)
	GasLimit      *GasLimitConfig        `protobuf:"bytes,2,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"` // Gas limit configuration
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DTVMRuntimeConfig) Reset() {
	*x = DTVMRuntimeConfig{}
	mi := &file_dtvm_dtvm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DTVMRuntimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTVMRuntimeConfig) ProtoMessage() {}

func (x *DTVMRuntimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dtvm_dtvm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTVMRuntimeConfig.ProtoReflect.Descriptor instead.
func (*DTVMRuntimeConfig) Descriptor() ([]byte, []int) {
	return file_dtvm_dtvm_proto_rawDescGZIP(), []int{1}
}

func (x *DTVMRuntimeConfig) GetMode() DTVMMode {
	if x != nil {
		return x.Mode
	}
	return DTVMMode_DTVM_MODE_INTERP_UNSPECIFIED
}

func (x *DTVMRuntimeConfig) GetGasLimit() *GasLimitConfig {
	if x != nil {
		return x.GasLimit
	}
	return nil
}

// GasLimitConfig controls gas consumption limits during execution
type GasLimitConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UseGasLimit   bool                   `protobuf:"varint,1,opt,name=use_gas_limit,json=useGasLimit,proto3" json:"use_gas_limit,omitempty"` // Whether to enable gas limiting
	Limit         int64                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                                  // Maximum gas units allowed (if enabled)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GasLimitConfig) Reset() {
	*x = GasLimitConfig{}
	mi := &file_dtvm_dtvm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GasLimitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasLimitConfig) ProtoMessage() {}

func (x *GasLimitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dtvm_dtvm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasLimitConfig.ProtoReflect.Descriptor instead.
func (*GasLimitConfig) Descriptor() ([]byte, []int) {
	return file_dtvm_dtvm_proto_rawDescGZIP(), []int{2}
}

func (x *GasLimitConfig) GetUseGasLimit() bool {
	if x != nil {
		return x.UseGasLimit
	}
	return false
}

func (x *GasLimitConfig) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// DTVMExecutionResult contains the complete execution result
// including inputs, outputs, hashes, and TEE attestation data
type DTVMExecutionResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Inputs        []string               `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`                                 // Original input parameters (base64 encoded)
	OutputValues  []*Value               `protobuf:"bytes,3,rep,name=output_values,json=outputValues,proto3" json:"output_values,omitempty"` // Execution output values
	Attestation   string                 `protobuf:"bytes,5,opt,name=attestation,proto3" json:"attestation,omitempty"`                       // TEE attestation report (JSON string)
	ReportData    string                 `protobuf:"bytes,6,opt,name=report_data,json=reportData,proto3" json:"report_data,omitempty"`       // TEE report data (hex encoded), hash(inputs+outputs)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DTVMExecutionResult) Reset() {
	*x = DTVMExecutionResult{}
	mi := &file_dtvm_dtvm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DTVMExecutionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTVMExecutionResult) ProtoMessage() {}

func (x *DTVMExecutionResult) ProtoReflect() protoreflect.Message {
	mi := &file_dtvm_dtvm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTVMExecutionResult.ProtoReflect.Descriptor instead.
func (*DTVMExecutionResult) Descriptor() ([]byte, []int) {
	return file_dtvm_dtvm_proto_rawDescGZIP(), []int{3}
}

func (x *DTVMExecutionResult) GetInputs() []string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *DTVMExecutionResult) GetOutputValues() []*Value {
	if x != nil {
		return x.OutputValues
	}
	return nil
}

func (x *DTVMExecutionResult) GetAttestation() string {
	if x != nil {
		return x.Attestation
	}
	return ""
}

func (x *DTVMExecutionResult) GetReportData() string {
	if x != nil {
		return x.ReportData
	}
	return ""
}

// Value represents a typed value returned from DTVM execution
// Wraps ZenValueExtern with type information
type Value struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  ValueType              `protobuf:"varint,1,opt,name=type,proto3,enum=dtvm.ValueType" json:"type,omitempty"` // Type of the value
	// Types that are valid to be assigned to Value:
	//
	//	*Value_Int32Value
	//	*Value_Int64Value
	//	*Value_Float32Value
	//	*Value_Float64Value
	Value         isValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_dtvm_dtvm_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_dtvm_dtvm_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_dtvm_dtvm_proto_rawDescGZIP(), []int{4}
}

func (x *Value) GetType() ValueType {
	if x != nil {
		return x.Type
	}
	return ValueType_VALUE_TYPE_UNSPECIFIED
}

func (x *Value) GetValue() isValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Value) GetInt32Value() int32 {
	if x != nil {
		if x, ok := x.Value.(*Value_Int32Value); ok {
			return x.Int32Value
		}
	}
	return 0
}

func (x *Value) GetInt64Value() int64 {
	if x != nil {
		if x, ok := x.Value.(*Value_Int64Value); ok {
			return x.Int64Value
		}
	}
	return 0
}

func (x *Value) GetFloat32Value() float32 {
	if x != nil {
		if x, ok := x.Value.(*Value_Float32Value); ok {
			return x.Float32Value
		}
	}
	return 0
}

func (x *Value) GetFloat64Value() float64 {
	if x != nil {
		if x, ok := x.Value.(*Value_Float64Value); ok {
			return x.Float64Value
		}
	}
	return 0
}

type isValue_Value interface {
	isValue_Value()
}

type Value_Int32Value struct {
	Int32Value int32 `protobuf:"varint,2,opt,name=int32_value,json=int32Value,proto3,oneof"` // 32-bit signed integer
}

type Value_Int64Value struct {
	Int64Value int64 `protobuf:"varint,3,opt,name=int64_value,json=int64Value,proto3,oneof"` // 64-bit signed integer
}

type Value_Float32Value struct {
	Float32Value float32 `protobuf:"fixed32,4,opt,name=float32_value,json=float32Value,proto3,oneof"` // 32-bit floating point
}

type Value_Float64Value struct {
	Float64Value float64 `protobuf:"fixed64,5,opt,name=float64_value,json=float64Value,proto3,oneof"` // 64-bit floating point
}

func (*Value_Int32Value) isValue_Value() {}

func (*Value_Int64Value) isValue_Value() {}

func (*Value_Float32Value) isValue_Value() {}

func (*Value_Float64Value) isValue_Value() {}

// DTVMExecutionRequest combines execution parameters and runtime configuration
type DTVMExecutionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Execution     *DTVMExecution         `protobuf:"bytes,1,opt,name=execution,proto3" json:"execution,omitempty"`                              // Execution parameters (bytecode, inputs)
	RuntimeConfig *DTVMRuntimeConfig     `protobuf:"bytes,2,opt,name=runtime_config,json=runtimeConfig,proto3" json:"runtime_config,omitempty"` // Runtime configuration (mode, gas limit)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DTVMExecutionRequest) Reset() {
	*x = DTVMExecutionRequest{}
	mi := &file_dtvm_dtvm_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DTVMExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTVMExecutionRequest) ProtoMessage() {}

func (x *DTVMExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtvm_dtvm_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTVMExecutionRequest.ProtoReflect.Descriptor instead.
func (*DTVMExecutionRequest) Descriptor() ([]byte, []int) {
	return file_dtvm_dtvm_proto_rawDescGZIP(), []int{5}
}

func (x *DTVMExecutionRequest) GetExecution() *DTVMExecution {
	if x != nil {
		return x.Execution
	}
	return nil
}

func (x *DTVMExecutionRequest) GetRuntimeConfig() *DTVMRuntimeConfig {
	if x != nil {
		return x.RuntimeConfig
	}
	return nil
}

// DTVMExecutionResponse contains the execution result with request tracking
type DTVMExecutionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // Request identifier for tracking
	Result        *DTVMExecutionResult   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`                        // Complete execution result
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DTVMExecutionResponse) Reset() {
	*x = DTVMExecutionResponse{}
	mi := &file_dtvm_dtvm_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DTVMExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTVMExecutionResponse) ProtoMessage() {}

func (x *DTVMExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dtvm_dtvm_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTVMExecutionResponse.ProtoReflect.Descriptor instead.
func (*DTVMExecutionResponse) Descriptor() ([]byte, []int) {
	return file_dtvm_dtvm_proto_rawDescGZIP(), []int{6}
}

func (x *DTVMExecutionResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DTVMExecutionResponse) GetResult() *DTVMExecutionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_dtvm_dtvm_proto protoreflect.FileDescriptor

const file_dtvm_dtvm_proto_rawDesc = "" +
	"\n" +
	"\x0fdtvm/dtvm.proto\x12\x04dtvm\"\xb3\x01\n" +
	"\rDTVMExecution\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x1d\n" +
	"\n" +
	"request_id\x18\x02 \x01(\tR\trequestId\x12\x1a\n" +
	"\bbytecode\x18\x03 \x01(\tR\bbytecode\x12\x17\n" +
	"\afn_name\x18\x04 \x01(\tR\x06fnName\x12\x16\n" +
	"\x06inputs\x18\x05 \x03(\tR\x06inputs\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\x03R\ttimestamp\"j\n" +
	"\x11DTVMRuntimeConfig\x12\"\n" +
	"\x04mode\x18\x01 \x01(\x0e2\x0e.dtvm.DTVMModeR\x04mode\x121\n" +
	"\tgas_limit\x18\x02 \x01(\v2\x14.dtvm.GasLimitConfigR\bgasLimit\"J\n" +
	"\x0eGasLimitConfig\x12\"\n" +
	"\ruse_gas_limit\x18\x01 \x01(\bR\vuseGasLimit\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x03R\x05limit\"\xa2\x01\n" +
	"\x13DTVMExecutionResult\x12\x16\n" +
	"\x06inputs\x18\x01 \x03(\tR\x06inputs\x120\n" +
	"\routput_values\x18\x03 \x03(\v2\v.dtvm.ValueR\foutputValues\x12 \n" +
	"\vattestation\x18\x05 \x01(\tR\vattestation\x12\x1f\n" +
	"\vreport_data\x18\x06 \x01(\tR\n" +
	"reportData\"\xc9\x01\n" +
	"\x05Value\x12#\n" +
	"\x04type\x18\x01 \x01(\x0e2\x0f.dtvm.ValueTypeR\x04type\x12!\n" +
	"\vint32_value\x18\x02 \x01(\x05H\x00R\n" +
	"int32Value\x12!\n" +
	"\vint64_value\x18\x03 \x01(\x03H\x00R\n" +
	"int64Value\x12%\n" +
	"\rfloat32_value\x18\x04 \x01(\x02H\x00R\ffloat32Value\x12%\n" +
	"\rfloat64_value\x18\x05 \x01(\x01H\x00R\ffloat64ValueB\a\n" +
	"\x05value\"\x89\x01\n" +
	"\x14DTVMExecutionRequest\x121\n" +
	"\texecution\x18\x01 \x01(\v2\x13.dtvm.DTVMExecutionR\texecution\x12>\n" +
	"\x0eruntime_config\x18\x02 \x01(\v2\x17.dtvm.DTVMRuntimeConfigR\rruntimeConfig\"i\n" +
	"\x15DTVMExecutionResponse\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x121\n" +
	"\x06result\x18\x02 \x01(\v2\x19.dtvm.DTVMExecutionResultR\x06result*_\n" +
	"\bDTVMMode\x12 \n" +
	"\x1cDTVM_MODE_INTERP_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14DTVM_MODE_SINGLEPASS\x10\x01\x12\x17\n" +
	"\x13DTVM_MODE_MULTIPASS\x10\x02*\x83\x01\n" +
	"\tValueType\x12\x1a\n" +
	"\x16VALUE_TYPE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10VALUE_TYPE_INT32\x10\x01\x12\x14\n" +
	"\x10VALUE_TYPE_INT64\x10\x02\x12\x16\n" +
	"\x12VALUE_TYPE_FLOAT32\x10\x03\x12\x16\n" +
	"\x12VALUE_TYPE_FLOAT64\x10\x042T\n" +
	"\x0eDTVMTeeService\x12B\n" +
	"\aExecute\x12\x1a.dtvm.DTVMExecutionRequest\x1a\x1b.dtvm.DTVMExecutionResponseBl\n" +
	"\bcom.dtvmB\tDtvmProtoP\x01Z%github.com/IntelliXLabs/dtvm-tee/dtvm\xa2\x02\x03DXX\xaa\x02\x04Dtvm\xca\x02\x04Dtvm\xe2\x02\x10Dtvm\\GPBMetadata\xea\x02\x04Dtvmb\x06proto3"

var (
	file_dtvm_dtvm_proto_rawDescOnce sync.Once
	file_dtvm_dtvm_proto_rawDescData []byte
)

func file_dtvm_dtvm_proto_rawDescGZIP() []byte {
	file_dtvm_dtvm_proto_rawDescOnce.Do(func() {
		file_dtvm_dtvm_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dtvm_dtvm_proto_rawDesc), len(file_dtvm_dtvm_proto_rawDesc)))
	})
	return file_dtvm_dtvm_proto_rawDescData
}

var file_dtvm_dtvm_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dtvm_dtvm_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_dtvm_dtvm_proto_goTypes = []any{
	(DTVMMode)(0),                 // 0: dtvm.DTVMMode
	(ValueType)(0),                // 1: dtvm.ValueType
	(*DTVMExecution)(nil),         // 2: dtvm.DTVMExecution
	(*DTVMRuntimeConfig)(nil),     // 3: dtvm.DTVMRuntimeConfig
	(*GasLimitConfig)(nil),        // 4: dtvm.GasLimitConfig
	(*DTVMExecutionResult)(nil),   // 5: dtvm.DTVMExecutionResult
	(*Value)(nil),                 // 6: dtvm.Value
	(*DTVMExecutionRequest)(nil),  // 7: dtvm.DTVMExecutionRequest
	(*DTVMExecutionResponse)(nil), // 8: dtvm.DTVMExecutionResponse
}
var file_dtvm_dtvm_proto_depIdxs = []int32{
	0, // 0: dtvm.DTVMRuntimeConfig.mode:type_name -> dtvm.DTVMMode
	4, // 1: dtvm.DTVMRuntimeConfig.gas_limit:type_name -> dtvm.GasLimitConfig
	6, // 2: dtvm.DTVMExecutionResult.output_values:type_name -> dtvm.Value
	1, // 3: dtvm.Value.type:type_name -> dtvm.ValueType
	2, // 4: dtvm.DTVMExecutionRequest.execution:type_name -> dtvm.DTVMExecution
	3, // 5: dtvm.DTVMExecutionRequest.runtime_config:type_name -> dtvm.DTVMRuntimeConfig
	5, // 6: dtvm.DTVMExecutionResponse.result:type_name -> dtvm.DTVMExecutionResult
	7, // 7: dtvm.DTVMTeeService.Execute:input_type -> dtvm.DTVMExecutionRequest
	8, // 8: dtvm.DTVMTeeService.Execute:output_type -> dtvm.DTVMExecutionResponse
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_dtvm_dtvm_proto_init() }
func file_dtvm_dtvm_proto_init() {
	if File_dtvm_dtvm_proto != nil {
		return
	}
	file_dtvm_dtvm_proto_msgTypes[4].OneofWrappers = []any{
		(*Value_Int32Value)(nil),
		(*Value_Int64Value)(nil),
		(*Value_Float32Value)(nil),
		(*Value_Float64Value)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dtvm_dtvm_proto_rawDesc), len(file_dtvm_dtvm_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dtvm_dtvm_proto_goTypes,
		DependencyIndexes: file_dtvm_dtvm_proto_depIdxs,
		EnumInfos:         file_dtvm_dtvm_proto_enumTypes,
		MessageInfos:      file_dtvm_dtvm_proto_msgTypes,
	}.Build()
	File_dtvm_dtvm_proto = out.File
	file_dtvm_dtvm_proto_goTypes = nil
	file_dtvm_dtvm_proto_depIdxs = nil
}
