name: Build and Deploy Binary to GCE

on:
  workflow_dispatch:

env:
  APP_NAME: sev_snp_server # Corresponds to your application name
  GCP_SERVICE_NAME: sev-snp-server # systemd service name on GCE

jobs:
  build-and-deploy-to-gce:
    name: Build and Deploy Binary to GCE
    runs-on: ubuntu-latest
    permissions:
      contents: 'read' # Permission to checkout the repository
      id-token: 'write' # Permission for google-github-actions/auth to authenticate

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }} # Assumes you are using Service Account Key JSON
        # If using Workload Identity Federation, uncomment below and comment above
        # workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.WIF_POOL_ID }}/providers/${{ secrets.WIF_PROVIDER_ID }}'
        # service_account: '${{ secrets.GSA_EMAIL }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.2' # Adjust to your Go version

    - name: Install WasmEdge and dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y curl build-essential pkg-config git
        curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -v 0.14.0
        source $HOME/.wasmedge/env
        echo "$HOME/.wasmedge/bin" >> $GITHUB_PATH
        # Set CGO flags for the build environment
        echo "CGO_CFLAGS=-I$HOME/.wasmedge/include" >> $GITHUB_ENV
        echo "CGO_LDFLAGS=-L$HOME/.wasmedge/lib -lwasmedge" >> $GITHUB_ENV
        echo "CGO_ENABLED=1" >> $GITHUB_ENV
        # Install Go dependencies
        make deps

    - name: Build application binary
      run: make build # This should produce ./bin/${{ env.APP_NAME }}

    - name: Deploy to GCE instance
      run: |
        LOCAL_BINARY_PATH="bin/${{ env.APP_NAME }}"
        REMOTE_TEMP_PATH="/tmp/${{ env.APP_NAME }}"
        REMOTE_FINAL_PATH="/usr/local/bin/${{ env.APP_NAME }}"
        
        echo "Copying ${LOCAL_BINARY_PATH} to GCE instance (${{ secrets.GCP_GCE_INSTANCE_NAME }}) at ${REMOTE_TEMP_PATH}"
        gcloud compute scp "${LOCAL_BINARY_PATH}" \
          "${{ secrets.GCP_GCE_INSTANCE_NAME }}:${REMOTE_TEMP_PATH}" \
          --zone=${{ secrets.GCP_GCE_ZONE }} \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --quiet

        echo "Executing deployment commands on GCE instance"
        gcloud compute ssh ${{ secrets.GCP_GCE_INSTANCE_NAME }} \
          --zone=${{ secrets.GCP_GCE_ZONE }} \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --quiet \
          --command="
            echo '--- Starting deployment on GCE instance ---'
            
            sudo apt-get update && sudo apt-get install -y curl build-essential pkg-config git
            curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -v 0.14.0
            source $HOME/.wasmedge/env


            # Create a more precise process check using exact binary path
            echo 'Checking for existing ${{ env.APP_NAME }} processes...'
            BINARY_PATH='/usr/local/bin/${{ env.APP_NAME }}'
            
            # Use a more specific pattern to find only our application processes
            EXISTING_PIDS=\$(ps aux | grep \"\$BINARY_PATH\" | grep -v grep | awk '{print \$2}' || true)
            
            if [ ! -z \"\$EXISTING_PIDS\" ]; then
              echo 'Found existing processes with PIDs: '\$EXISTING_PIDS
              echo 'Process details:'
              ps aux | grep \"\$BINARY_PATH\" | grep -v grep || true
              
              echo 'Attempting graceful shutdown...'
              for pid in \$EXISTING_PIDS; do
                if [ -d \"/proc/\$pid\" ]; then
                  echo \"Sending TERM signal to PID \$pid\"
                  sudo kill -TERM \$pid 2>/dev/null || echo \"Failed to send TERM to \$pid (may have already exited)\"
                else
                  echo \"PID \$pid no longer exists\"
                fi
              done
              
              # Wait for graceful shutdown
              echo 'Waiting 5 seconds for graceful shutdown...'
              sleep 5
              
              # Check for remaining processes
              REMAINING_PIDS=\$(ps aux | grep \"\$BINARY_PATH\" | grep -v grep | awk '{print \$2}' || true)
              if [ ! -z \"\$REMAINING_PIDS\" ]; then
                echo 'Some processes still running, force killing...'
                for pid in \$REMAINING_PIDS; do
                  if [ -d \"/proc/\$pid\" ]; then
                    echo \"Force killing PID \$pid\"
                    sudo kill -KILL \$pid 2>/dev/null || echo \"Failed to force kill \$pid\"
                  fi
                done
                sleep 2
              fi
              echo 'Process cleanup completed.'
            else
              echo 'No existing processes found.'
            fi
            
            echo 'Moving binary from ${REMOTE_TEMP_PATH} to ${REMOTE_FINAL_PATH}'
            sudo mv '${REMOTE_TEMP_PATH}' '${REMOTE_FINAL_PATH}'
            sudo chmod +x '${REMOTE_FINAL_PATH}'
            
            # Create log directory and set proper permissions
            echo 'Setting up directories and permissions...'
            sudo mkdir -p /var/log/${{ env.APP_NAME }}
            sudo mkdir -p /var/run/${{ env.APP_NAME }}
            
            # Create log file with proper permissions
            sudo touch /var/log/${{ env.APP_NAME }}/${{ env.APP_NAME }}.log
            sudo touch /var/run/${{ env.APP_NAME }}/${{ env.APP_NAME }}.pid
            
            # Set permissions - make directories and files writable by all users
            # This ensures the process can write regardless of which user it runs as
            sudo chmod 755 /var/log/${{ env.APP_NAME }}
            sudo chmod 755 /var/run/${{ env.APP_NAME }}
            sudo chmod 666 /var/log/${{ env.APP_NAME }}/${{ env.APP_NAME }}.log
            sudo chmod 666 /var/run/${{ env.APP_NAME }}/${{ env.APP_NAME }}.pid
            
            echo 'Starting ${{ env.APP_NAME }} with nohup...'
            # Change to a safe directory before starting the process
            cd /tmp
            
            # Start the process with nohup, using full paths for everything
            sudo bash -c 'nohup /usr/local/bin/${{ env.APP_NAME }} >> /var/log/${{ env.APP_NAME }}/${{ env.APP_NAME }}.log 2>&1 & echo \$! > /var/run/${{ env.APP_NAME }}/${{ env.APP_NAME }}.pid'
            
            # Wait a moment for the process to start
            sleep 3
            
            # Check if PID file exists and has content
            if [ -f '/var/run/${{ env.APP_NAME }}/${{ env.APP_NAME }}.pid' ] && [ -s '/var/run/${{ env.APP_NAME }}/${{ env.APP_NAME }}.pid' ]; then
              NEW_PID=\$(cat /var/run/${{ env.APP_NAME }}/${{ env.APP_NAME }}.pid)
              echo 'PID file contains: '\$NEW_PID
              
              # Verify the process is actually running
              if [ -d \"/proc/\$NEW_PID\" ]; then
                # Double check this is our process
                PROC_CMD=\$(ps -p \$NEW_PID -o cmd --no-headers 2>/dev/null || echo '')
                if echo \"\$PROC_CMD\" | grep -q '${{ env.APP_NAME }}'; then
                  echo '✅ ${{ env.APP_NAME }} started successfully with PID: '\$NEW_PID
                  echo 'Process command: '\$PROC_CMD
                  
                  # Check if log file has content
                  echo 'Recent log output:'
                  tail -10 /var/log/${{ env.APP_NAME }}/${{ env.APP_NAME }}.log || echo 'No log output yet.'
                  
                  # Check if the process is listening on expected ports (optional)
                  echo 'Network connections:'
                  sudo netstat -tulpn | grep \$NEW_PID || echo 'No network connections found for this process.'
                else
                  echo '❌ Process with PID '\$NEW_PID' is not our application'
                  echo 'Process command: '\$PROC_CMD
                  exit 1
                fi
              else
                echo '❌ Process with PID '\$NEW_PID' is not running'
                echo 'Checking recent log output for errors:'
                tail -20 /var/log/${{ env.APP_NAME }}/${{ env.APP_NAME }}.log || echo 'No log content found.'
                exit 1
              fi
            else
              echo '❌ PID file not created or empty'
              echo 'Checking if process started without PID file...'
              MANUAL_CHECK=\$(ps aux | grep '/usr/local/bin/${{ env.APP_NAME }}' | grep -v grep || true)
              if [ ! -z \"\$MANUAL_CHECK\" ]; then
                echo 'Process seems to be running:'
                echo \"\$MANUAL_CHECK\"
              else
                echo 'No process found running.'
              fi
              echo 'Checking recent log output for errors:'
              tail -20 /var/log/${{ env.APP_NAME }}/${{ env.APP_NAME }}.log || echo 'No log file found.'
              exit 1
            fi
            
            echo '--- Deployment on GCE instance finished ---'
          "
